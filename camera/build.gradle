apply plugin: 'com.android.library'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: "kotlin-kapt"

android {

    compileSdkVersion 29
    defaultConfig {
        minSdkVersion 22
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        flavorDimensions "default"
        multiDexEnabled true
        ndk {
            abiFilters "armeabi-v7a"
        }
        externalNativeBuild {
            cmake {
                cppFlags "-fexceptions"
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled true
        }
    }

    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }
}

dependencies {

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'

    //
    implementation "com.google.firebase:firebase-ml-model-interpreter:22.0.1"
    implementation "com.google.firebase:firebase-ml-vision-face-model:19.0.0"
    implementation "com.google.firebase:firebase-ml-vision-automl:18.0.3"
    implementation "com.google.firebase:firebase-ml-vision:24.0.1"

    //
    implementation "io.reactivex.rxjava2:rxjava:2.2.17"
    implementation "io.reactivex.rxjava2:rxkotlin:2.4.0"
    implementation "com.jakewharton.rxbinding2:rxbinding-kotlin:2.1.1"

    //
    implementation 'org.tensorflow:tensorflow-android:1.13.1'
}

repositories {
    maven {
        url "https://dl.bintray.com/intel-realsense/librealsense"
    }
}

configurations {
    downloadHeader
    downloadSo
}

dependencies {
    def version = '2.34.0'
    downloadSo 'com.intel.realsense:librealsense:' + version + '@aar'
    implementation 'com.intel.realsense:librealsense:' + version + '@aar'
    downloadHeader 'com.intel.realsense:librealsense:' + version + '@zip'
}

task extractHeaders(type: Sync) {
    dependsOn configurations.downloadHeader
    from { configurations.downloadHeader.collect { zipTree(it) } }
    into "$projectDir/src/main/cpp/include"
}

task extractSo(type: Sync) {
    dependsOn configurations.downloadSo
    from { configurations.downloadSo.collect { zipTree(it) } }
    include("jni/**")
    into "$buildDir/"
}

preBuild.dependsOn(extractHeaders)
preBuild.dependsOn(extractSo)